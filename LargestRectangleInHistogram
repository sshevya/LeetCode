
/*********** Solution 1**************/

class Solution {
public:


    int nextSmallerLeft(vector<int>& heights, int curr){

        int ans = curr ;
        for(int i = curr-1;i>=0;i--){
            if(heights[i]<heights[curr]){
                return i;
            }
        }
        return 0;
    }

    int nextSmallerRight(vector<int>& heights, int curr){

        int n = heights.size() ;
        for(int i = curr+1;i<n;i++){
            if(heights[i]<heights[curr]){
                return i;
            }
        }
        return n-1;
    }       


    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int maxArea = heights[0];
        
        stack<int> s;
        int i = 0;
        while(i<n){

            if(s.empty() || heights[s.top()]<=heights[i]){
                s.push(i);
                i++;
            }
            else{
                
                int j = s.top();
                s.pop();
                int ar_with_top = heights[j]*(s.empty()?i:(i-s.top()-1));
                maxArea = max(maxArea, ar_with_top);

            }
            
        }
        
        while(!s.empty()){
                int j = s.top();
                s.pop();
                int ar_with_top = heights[j]*(s.empty()?i:(i-s.top()-1));

                maxArea = max(maxArea, ar_with_top);

            }
        return maxArea;
    }
};



/************* Solution 2 ***************/
class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> s;
        int max_ar = 0;
        int i=0;
        
        while(i<n){
            if(i<n && (s.empty() || heights[s.top()]<=heights[i])){
                s.push(i);
                i++;
            }
            else{
                int top = s.top();
                s.pop();

                int width = s.empty()?i:i-s.top()-1;

                int ar = width*heights[top];
                max_ar = max(max_ar, ar);

            }
        }


        while(!s.empty()){
            int top = s.top();
            s.pop();

            int width = s.empty()?n:n-s.top()-1;
            cout<<width<<" ";
            int ar = width*heights[top];
            max_ar = max(max_ar, ar);
        }

        return max_ar;
    }
};
